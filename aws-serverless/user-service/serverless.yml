service: user-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:ForgotPassword
        - cognito-idp:SignUp
      Resource: "*"
    
  lambdaHashingVersion: 20201221

functions:
  registerUser:
    handler: route.registerUser
    description: Register a user
    events:
      - http:
          path: /register
          method: post
          cors: true

  fetchUsers:
      handler: route.fetchUsers
      memorySize: 128
      description: Fetch all Registered Users
      events:
        - http:
            path: /users
            method: get
            cors: true

  signInUser:
    handler: route.signInUser
    description: SignIn user
    events:
      - http:
          path: /signin
          method: post
          cors: true

  forgotPassword:
    handler: route.forgotPassword
    description: Forgot Password
    events:
      - http:
          path: /forgotPassword
          method: post
          cors: true

  resetPassword:
    handler: route.resetPassword
    description: Reset Password
    events:
      - http:
          path: /resetPassword/{id}/{token}
          method: put
          cors: true

  deleteUser:
      handler: route.deleteUser
      memorySize: 128
      description: Delete a User
      events:
        - http:
            path: /deleteUser/{id}
            method: delete
            cors: true

  registerUserCognito:
      handler: route.registerUserCognito
      description: Register User using Cognito
      events:
        - http:
            path: /registerUserCognito
            method: post
            cors: true

  confirmRegisterUserCognito:
    handler: route.confirmRegisterUserCognito
    description: Confirm Register User using Cognito
    events:
      - http:
          path: /confirmRegisterUserCognito
          method: post
          cors: true
  
  signInUserCognito:
      handler: route.signInUserCognito
      description: SignIn User using Cognito
      events:
        - http:
            path: /signInUserCognito
            method: post
            cors: true

  forgotPasswordCognito:
      handler: route.forgotPasswordCognito
      description: Forgot Password using Cognito
      events:
        - http:
            path: /forgotPasswordCognito
            method: post
            cors: true

  resetPasswordCognito:
      handler: route.resetPasswordCognito
      description: Reset Password using Cognito
      events:
        - http:
            path: /resetPasswordCognito
            method: post
            cors: true

plugins:
  - serverless-webpack

resources:
  Resources:
    UsersDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: "email_index"
            KeySchema:
              - AttributeName: "email"
                KeyType: "HASH"
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USER_TABLE}

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            Required: true
            Mutable: true

        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"    
